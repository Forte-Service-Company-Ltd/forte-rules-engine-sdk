/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace RulesStorageStructure {
  export type TrackersStruct = { pType: BigNumberish; trackerValue: BytesLike };

  export type TrackersStructOutput = [pType: bigint, trackerValue: string] & {
    pType: bigint;
    trackerValue: string;
  };

  export type PlaceholderStruct = {
    pType: BigNumberish;
    typeSpecificIndex: BigNumberish;
    trackerValue: boolean;
    foreignCall: boolean;
  };

  export type PlaceholderStructOutput = [
    pType: bigint,
    typeSpecificIndex: bigint,
    trackerValue: boolean,
    foreignCall: boolean
  ] & {
    pType: bigint;
    typeSpecificIndex: bigint;
    trackerValue: boolean;
    foreignCall: boolean;
  };

  export type IndividualArgumentMappingStruct = {
    functionCallArgumentType: BigNumberish;
    functionSignatureArg: RulesStorageStructure.PlaceholderStruct;
  };

  export type IndividualArgumentMappingStructOutput = [
    functionCallArgumentType: bigint,
    functionSignatureArg: RulesStorageStructure.PlaceholderStructOutput
  ] & {
    functionCallArgumentType: bigint;
    functionSignatureArg: RulesStorageStructure.PlaceholderStructOutput;
  };

  export type ForeignCallArgumentMappingsStruct = {
    foreignCallIndex: BigNumberish;
    mappings: RulesStorageStructure.IndividualArgumentMappingStruct[];
  };

  export type ForeignCallArgumentMappingsStructOutput = [
    foreignCallIndex: bigint,
    mappings: RulesStorageStructure.IndividualArgumentMappingStructOutput[]
  ] & {
    foreignCallIndex: bigint;
    mappings: RulesStorageStructure.IndividualArgumentMappingStructOutput[];
  };

  export type ArgumentsStruct = {
    argumentTypes: BigNumberish[];
    values: BytesLike[];
  };

  export type ArgumentsStructOutput = [
    argumentTypes: bigint[],
    values: string[]
  ] & { argumentTypes: bigint[]; values: string[] };

  export type RawDataStruct = {
    instructionSetIndex: BigNumberish[];
    argumentTypes: BigNumberish[];
    dataValues: BytesLike[];
  };

  export type RawDataStructOutput = [
    instructionSetIndex: bigint[],
    argumentTypes: bigint[],
    dataValues: string[]
  ] & {
    instructionSetIndex: bigint[];
    argumentTypes: bigint[];
    dataValues: string[];
  };

  export type RuleStruct = {
    instructionSet: BigNumberish[];
    rawData: RulesStorageStructure.RawDataStruct;
    placeHolders: RulesStorageStructure.PlaceholderStruct[];
    effectPlaceHolders: RulesStorageStructure.PlaceholderStruct[];
    fcArgumentMappingsConditions: RulesStorageStructure.ForeignCallArgumentMappingsStruct[];
    fcArgumentMappingsEffects: RulesStorageStructure.ForeignCallArgumentMappingsStruct[];
    posEffects: BigNumberish[];
    negEffects: BigNumberish[];
  };

  export type RuleStructOutput = [
    instructionSet: bigint[],
    rawData: RulesStorageStructure.RawDataStructOutput,
    placeHolders: RulesStorageStructure.PlaceholderStructOutput[],
    effectPlaceHolders: RulesStorageStructure.PlaceholderStructOutput[],
    fcArgumentMappingsConditions: RulesStorageStructure.ForeignCallArgumentMappingsStructOutput[],
    fcArgumentMappingsEffects: RulesStorageStructure.ForeignCallArgumentMappingsStructOutput[],
    posEffects: bigint[],
    negEffects: bigint[]
  ] & {
    instructionSet: bigint[];
    rawData: RulesStorageStructure.RawDataStructOutput;
    placeHolders: RulesStorageStructure.PlaceholderStructOutput[];
    effectPlaceHolders: RulesStorageStructure.PlaceholderStructOutput[];
    fcArgumentMappingsConditions: RulesStorageStructure.ForeignCallArgumentMappingsStructOutput[];
    fcArgumentMappingsEffects: RulesStorageStructure.ForeignCallArgumentMappingsStructOutput[];
    posEffects: bigint[];
    negEffects: bigint[];
  };

  export type ForeignCallReturnValueStruct = {
    pType: BigNumberish;
    value: BytesLike;
  };

  export type ForeignCallReturnValueStructOutput = [
    pType: bigint,
    value: string
  ] & { pType: bigint; value: string };

  export type AddressVerificationStructStruct = {
    instructionSetValue: BigNumberish;
    rawData: AddressLike;
  };

  export type AddressVerificationStructStructOutput = [
    instructionSetValue: bigint,
    rawData: string
  ] & { instructionSetValue: bigint; rawData: string };

  export type StringVerificationStructStruct = {
    instructionSetValue: BigNumberish;
    rawData: string;
  };

  export type StringVerificationStructStructOutput = [
    instructionSetValue: bigint,
    rawData: string
  ] & { instructionSetValue: bigint; rawData: string };

  export type ForeignCallStruct = {
    foreignCallAddress: AddressLike;
    foreignCallIndex: BigNumberish;
    signature: BytesLike;
    returnType: BigNumberish;
    parameterTypes: BigNumberish[];
  };

  export type ForeignCallStructOutput = [
    foreignCallAddress: string,
    foreignCallIndex: bigint,
    signature: string,
    returnType: bigint,
    parameterTypes: bigint[]
  ] & {
    foreignCallAddress: string;
    foreignCallIndex: bigint;
    signature: string;
    returnType: bigint;
    parameterTypes: bigint[];
  };
}

export declare namespace EffectStructures {
  export type EffectStruct = {
    effectId: BigNumberish;
    effectType: BigNumberish;
    text: string;
    instructionSet: BigNumberish[];
  };

  export type EffectStructOutput = [
    effectId: bigint,
    effectType: bigint,
    text: string,
    instructionSet: bigint[]
  ] & {
    effectId: bigint;
    effectType: bigint;
    text: string;
    instructionSet: bigint[];
  };
}

export interface RulesEngineRunLogicInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addTracker"
      | "applyPolicy"
      | "bool2ui"
      | "buildArguments"
      | "checkPolicies"
      | "deleteEffect"
      | "doEffects"
      | "evaluateExpression"
      | "evaluateForeignCalls"
      | "evaluateRulesAndExecuteEffects"
      | "getTracker"
      | "retrieveRawAddressFromInstructionSet"
      | "retrieveRawStringFromInstructionSet"
      | "run"
      | "ui2bool"
      | "updateEffect"
      | "updateForeignCall"
      | "updateFunctionSignature"
      | "updatePolicy"
      | "updateRule"
      | "updateTracker"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "RulesEngineEvent"): EventFragment;

  encodeFunctionData(
    functionFragment: "addTracker",
    values: [BigNumberish, RulesStorageStructure.TrackersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "applyPolicy",
    values: [AddressLike, BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "bool2ui", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "buildArguments",
    values: [
      BigNumberish,
      RulesStorageStructure.PlaceholderStruct[],
      RulesStorageStructure.ForeignCallArgumentMappingsStruct[],
      RulesStorageStructure.ArgumentsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "checkPolicies",
    values: [AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteEffect",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "doEffects",
    values: [
      BigNumberish,
      BigNumberish[],
      RulesStorageStructure.RuleStruct,
      RulesStorageStructure.ArgumentsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "evaluateExpression",
    values: [
      BigNumberish,
      RulesStorageStructure.RuleStruct,
      RulesStorageStructure.ArgumentsStruct,
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "evaluateForeignCalls",
    values: [
      BigNumberish,
      RulesStorageStructure.PlaceholderStruct[],
      RulesStorageStructure.ForeignCallArgumentMappingsStruct[],
      RulesStorageStructure.ArgumentsStruct,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "evaluateRulesAndExecuteEffects",
    values: [
      BigNumberish,
      RulesStorageStructure.RuleStruct[],
      RulesStorageStructure.ArgumentsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getTracker",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "retrieveRawAddressFromInstructionSet",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "retrieveRawStringFromInstructionSet",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "run",
    values: [
      BigNumberish,
      BigNumberish[],
      RulesStorageStructure.ArgumentsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "ui2bool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateEffect",
    values: [EffectStructures.EffectStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "updateForeignCall",
    values: [BigNumberish, AddressLike, string, BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFunctionSignature",
    values: [BigNumberish, BytesLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePolicy",
    values: [BigNumberish, BytesLike[], BigNumberish[], BigNumberish[][]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRule",
    values: [BigNumberish, RulesStorageStructure.RuleStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTracker",
    values: [
      BigNumberish,
      BigNumberish,
      AddressLike,
      string,
      boolean,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(functionFragment: "addTracker", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "applyPolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bool2ui", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buildArguments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkPolicies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteEffect",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "doEffects", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "evaluateExpression",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "evaluateForeignCalls",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "evaluateRulesAndExecuteEffects",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTracker", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "retrieveRawAddressFromInstructionSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retrieveRawStringFromInstructionSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "run", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ui2bool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateEffect",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateForeignCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFunctionSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateRule", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateTracker",
    data: BytesLike
  ): Result;
}

export namespace RulesEngineEventEvent {
  export type InputTuple = [_message: string];
  export type OutputTuple = [_message: string];
  export interface OutputObject {
    _message: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RulesEngineRunLogic extends BaseContract {
  connect(runner?: ContractRunner | null): RulesEngineRunLogic;
  waitForDeployment(): Promise<this>;

  interface: RulesEngineRunLogicInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addTracker: TypedContractMethod<
    [_policyId: BigNumberish, tracker: RulesStorageStructure.TrackersStruct],
    [void],
    "nonpayable"
  >;

  applyPolicy: TypedContractMethod<
    [_contractAddress: AddressLike, _policyId: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  bool2ui: TypedContractMethod<[x: boolean], [bigint], "view">;

  buildArguments: TypedContractMethod<
    [
      _policyId: BigNumberish,
      placeHolders: RulesStorageStructure.PlaceholderStruct[],
      fcArgs: RulesStorageStructure.ForeignCallArgumentMappingsStruct[],
      functionSignatureArgs: RulesStorageStructure.ArgumentsStruct
    ],
    [RulesStorageStructure.ArgumentsStructOutput],
    "nonpayable"
  >;

  checkPolicies: TypedContractMethod<
    [
      contractAddress: AddressLike,
      functionSignature: BytesLike,
      arguments: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  deleteEffect: TypedContractMethod<
    [_effectId: BigNumberish],
    [void],
    "nonpayable"
  >;

  doEffects: TypedContractMethod<
    [
      _policyId: BigNumberish,
      _effectIds: BigNumberish[],
      applicableRule: RulesStorageStructure.RuleStruct,
      functionSignatureArgs: RulesStorageStructure.ArgumentsStruct
    ],
    [void],
    "nonpayable"
  >;

  evaluateExpression: TypedContractMethod<
    [
      _policyId: BigNumberish,
      applicableRule: RulesStorageStructure.RuleStruct,
      functionSignatureArgs: RulesStorageStructure.ArgumentsStruct,
      instructionSet: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  evaluateForeignCalls: TypedContractMethod<
    [
      _policyId: BigNumberish,
      placeHolders: RulesStorageStructure.PlaceholderStruct[],
      fcArgumentMappings: RulesStorageStructure.ForeignCallArgumentMappingsStruct[],
      functionSignatureArgs: RulesStorageStructure.ArgumentsStruct,
      placeholderIndex: BigNumberish
    ],
    [RulesStorageStructure.ForeignCallReturnValueStructOutput],
    "nonpayable"
  >;

  evaluateRulesAndExecuteEffects: TypedContractMethod<
    [
      _policyId: BigNumberish,
      applicableRules: RulesStorageStructure.RuleStruct[],
      functionSignatureArgs: RulesStorageStructure.ArgumentsStruct
    ],
    [boolean],
    "nonpayable"
  >;

  getTracker: TypedContractMethod<
    [_policyId: BigNumberish, index: BigNumberish],
    [RulesStorageStructure.TrackersStructOutput],
    "view"
  >;

  retrieveRawAddressFromInstructionSet: TypedContractMethod<
    [_ruleId: BigNumberish, instructionSetId: BigNumberish],
    [RulesStorageStructure.AddressVerificationStructStructOutput],
    "view"
  >;

  retrieveRawStringFromInstructionSet: TypedContractMethod<
    [_ruleId: BigNumberish, instructionSetId: BigNumberish],
    [RulesStorageStructure.StringVerificationStructStructOutput],
    "view"
  >;

  run: TypedContractMethod<
    [
      _policyId: BigNumberish,
      prog: BigNumberish[],
      arguments: RulesStorageStructure.ArgumentsStruct
    ],
    [boolean],
    "nonpayable"
  >;

  ui2bool: TypedContractMethod<[x: BigNumberish], [boolean], "view">;

  updateEffect: TypedContractMethod<
    [_effect: EffectStructures.EffectStruct],
    [bigint],
    "nonpayable"
  >;

  updateForeignCall: TypedContractMethod<
    [
      _policyId: BigNumberish,
      foreignContractAddress: AddressLike,
      functionSignature: string,
      returnType: BigNumberish,
      arguments: BigNumberish[]
    ],
    [RulesStorageStructure.ForeignCallStructOutput],
    "nonpayable"
  >;

  updateFunctionSignature: TypedContractMethod<
    [
      _functionSignatureId: BigNumberish,
      functionSignature: BytesLike,
      pTypes: BigNumberish[]
    ],
    [bigint],
    "nonpayable"
  >;

  updatePolicy: TypedContractMethod<
    [
      _policyId: BigNumberish,
      _signatures: BytesLike[],
      functionSignatureIds: BigNumberish[],
      ruleIds: BigNumberish[][]
    ],
    [bigint],
    "nonpayable"
  >;

  updateRule: TypedContractMethod<
    [_ruleId: BigNumberish, rule: RulesStorageStructure.RuleStruct],
    [bigint],
    "nonpayable"
  >;

  updateTracker: TypedContractMethod<
    [
      _policyId: BigNumberish,
      updatedUintTracker: BigNumberish,
      updatedAddressTracker: AddressLike,
      updatedStringTracker: string,
      updatedBoolTracker: boolean,
      updatedBytesTracker: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addTracker"
  ): TypedContractMethod<
    [_policyId: BigNumberish, tracker: RulesStorageStructure.TrackersStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "applyPolicy"
  ): TypedContractMethod<
    [_contractAddress: AddressLike, _policyId: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "bool2ui"
  ): TypedContractMethod<[x: boolean], [bigint], "view">;
  getFunction(
    nameOrSignature: "buildArguments"
  ): TypedContractMethod<
    [
      _policyId: BigNumberish,
      placeHolders: RulesStorageStructure.PlaceholderStruct[],
      fcArgs: RulesStorageStructure.ForeignCallArgumentMappingsStruct[],
      functionSignatureArgs: RulesStorageStructure.ArgumentsStruct
    ],
    [RulesStorageStructure.ArgumentsStructOutput],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "checkPolicies"
  ): TypedContractMethod<
    [
      contractAddress: AddressLike,
      functionSignature: BytesLike,
      arguments: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deleteEffect"
  ): TypedContractMethod<[_effectId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "doEffects"
  ): TypedContractMethod<
    [
      _policyId: BigNumberish,
      _effectIds: BigNumberish[],
      applicableRule: RulesStorageStructure.RuleStruct,
      functionSignatureArgs: RulesStorageStructure.ArgumentsStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "evaluateExpression"
  ): TypedContractMethod<
    [
      _policyId: BigNumberish,
      applicableRule: RulesStorageStructure.RuleStruct,
      functionSignatureArgs: RulesStorageStructure.ArgumentsStruct,
      instructionSet: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "evaluateForeignCalls"
  ): TypedContractMethod<
    [
      _policyId: BigNumberish,
      placeHolders: RulesStorageStructure.PlaceholderStruct[],
      fcArgumentMappings: RulesStorageStructure.ForeignCallArgumentMappingsStruct[],
      functionSignatureArgs: RulesStorageStructure.ArgumentsStruct,
      placeholderIndex: BigNumberish
    ],
    [RulesStorageStructure.ForeignCallReturnValueStructOutput],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "evaluateRulesAndExecuteEffects"
  ): TypedContractMethod<
    [
      _policyId: BigNumberish,
      applicableRules: RulesStorageStructure.RuleStruct[],
      functionSignatureArgs: RulesStorageStructure.ArgumentsStruct
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getTracker"
  ): TypedContractMethod<
    [_policyId: BigNumberish, index: BigNumberish],
    [RulesStorageStructure.TrackersStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "retrieveRawAddressFromInstructionSet"
  ): TypedContractMethod<
    [_ruleId: BigNumberish, instructionSetId: BigNumberish],
    [RulesStorageStructure.AddressVerificationStructStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "retrieveRawStringFromInstructionSet"
  ): TypedContractMethod<
    [_ruleId: BigNumberish, instructionSetId: BigNumberish],
    [RulesStorageStructure.StringVerificationStructStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "run"
  ): TypedContractMethod<
    [
      _policyId: BigNumberish,
      prog: BigNumberish[],
      arguments: RulesStorageStructure.ArgumentsStruct
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "ui2bool"
  ): TypedContractMethod<[x: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "updateEffect"
  ): TypedContractMethod<
    [_effect: EffectStructures.EffectStruct],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateForeignCall"
  ): TypedContractMethod<
    [
      _policyId: BigNumberish,
      foreignContractAddress: AddressLike,
      functionSignature: string,
      returnType: BigNumberish,
      arguments: BigNumberish[]
    ],
    [RulesStorageStructure.ForeignCallStructOutput],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateFunctionSignature"
  ): TypedContractMethod<
    [
      _functionSignatureId: BigNumberish,
      functionSignature: BytesLike,
      pTypes: BigNumberish[]
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updatePolicy"
  ): TypedContractMethod<
    [
      _policyId: BigNumberish,
      _signatures: BytesLike[],
      functionSignatureIds: BigNumberish[],
      ruleIds: BigNumberish[][]
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateRule"
  ): TypedContractMethod<
    [_ruleId: BigNumberish, rule: RulesStorageStructure.RuleStruct],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateTracker"
  ): TypedContractMethod<
    [
      _policyId: BigNumberish,
      updatedUintTracker: BigNumberish,
      updatedAddressTracker: AddressLike,
      updatedStringTracker: string,
      updatedBoolTracker: boolean,
      updatedBytesTracker: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "RulesEngineEvent"
  ): TypedContractEvent<
    RulesEngineEventEvent.InputTuple,
    RulesEngineEventEvent.OutputTuple,
    RulesEngineEventEvent.OutputObject
  >;

  filters: {
    "RulesEngineEvent(string)": TypedContractEvent<
      RulesEngineEventEvent.InputTuple,
      RulesEngineEventEvent.OutputTuple,
      RulesEngineEventEvent.OutputObject
    >;
    RulesEngineEvent: TypedContractEvent<
      RulesEngineEventEvent.InputTuple,
      RulesEngineEventEvent.OutputTuple,
      RulesEngineEventEvent.OutputObject
    >;
  };
}
